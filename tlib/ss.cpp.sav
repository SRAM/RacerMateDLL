
#ifdef WIN32
	#define STRICT
	#define WIN32_LEAN_AND_MEAN
	#pragma warning(disable:4996)					// for vista strncpy_s
	#include <windows.h>
	#include <mmsystem.h>
#endif


#include <float.h>
#include <math.h>
#include <assert.h>
#include <defines.h>
#include <utils.h>
#include <fatalerror.h>
#include <ss.h>
#include <globals.h>

/**********************************************************************
	constructor 1 (makes it's own window)
**********************************************************************/



SS::SS(int _segments)  {
	int i;
	double dtemp;

	segments = _segments;
	assert(segments==48);


	if (segments<=0)  {
		throw(fatalError(__FILE__, __LINE__, "segments <= 0"));
	}

	filteredTorques = new float[segments];
	thisRevForces = new float[segments];
	thrust = new THRUST[segments];

	reset_flag = true;

	this_rev_max = -FLT_MAX;

	avgTimer = new AverageTimer("SS");

	#ifdef _DEBUG
		//log = new Logger("ss.log", logpath);
		log = NULL;
	#else
		log = NULL;
	#endif

	SSShift = 18;

	middle = segments / 2;
	//SSShift = 28;			// a function of the amount of acceleration filtering
	degperseg = 360.0 / (double)segments;
	metric = FALSE;
	TCD = 16.0f;	// denominator (16.0f)
	TCN = .27f;		// numerator (.27f)
	double doffs = (360.0 / segments) /2.0;			// get the angle of the CENTER of the bar!, eg, 2.5 degrees


	force = new float[600];
	lastTwoRevForces = new float[(unsigned int) (segments*2) ];
	counts = new int[(unsigned int)segments];
	rpmMav = new sMav(7);
	wattsFilter = new LPFilter(30);		// was 30

	tpf = new twoPoleFilter *[segments];
	for(i=0;i<segments;i++)  {
		tpf[i] = new twoPoleFilter(100);		// argument is unused, so it doesn't matter
	}

	reset();

	for(i=0;i<segments;i++)  {
		//thrust[i].fval = thrust[i].raw = thrust[i].a = 0.0f;
		thrust[1].oldy = 0;
		dtemp = degperseg*i + doffs;
		thrust[i].center_degrees = dtemp;								// degrees at the CENTER of the bar
		thrust[i].beginning_radians = degperseg*i*(PI/180.0);		// radians at the BEGINNING of the bar
		thrust[i].center_radians = dtemp*(PI/180.0);		// radians at the CENTER of the bar
		thrust[i].sin = sin((PI/180.0)*thrust[i].center_degrees-(PI/180.0)*doffs);
		thrust[i].cos = cos((PI/180.0)*thrust[i].center_degrees-(PI/180.0)*doffs);
		thrust[i].oldx = 0;
		thrust[i].oldx = 0;
	}

	size = sizeof(*this);		// 4
}								// constructor



/**********************************************************************
	destructor
**********************************************************************/

SS::~SS()  {


	DEL(rpmMav);

	DELARR(lastTwoRevForces);
	DELARR(counts);
	DELARR(force);
	DEL(wattsFilter);
	DEL(avgTimer);
	DEL(log);

	if (tpf)  {
		for(int i=0;i<segments;i++)  {
			DEL(tpf[i]);
		}
		delete [] tpf;
		tpf = NULL;
	}

	DELARR(filteredTorques);
	DELARR(thisRevForces);
	DELARR(thrust);

	return;
}

/*-----------------------------------------------------------------------------------------
	called every 5 ms when a new record has arrived.

	called by velotronDecoder::decode():
		ss->run(physics->rpmFromHoles, physics->watts, meta.tdc);		// make sure to use the unfiltered watts for spinscan!!!

-----------------------------------------------------------------------------------------*/

float SS::run(double _watts, double _force, double _rpm, unsigned char _tdc)  {

	//avgTimer->update();							// result was 5 ms

	ssrec++;

#if 1
	thisforce = (float)_force;
#else
	double watts;
	watts = wattsFilter->calc(_watts);			// filter length is 0 (no filtering)
	//watts = amp->calc(watts);

	if (_rpm > 0)  {
		/*
			kw = nm * 2*pi * rpm / 60000
			nm*2*pi*rpm = kw *60000
			nm*2*pi*rpm = w*60
			nm = (w*60) / (2*pi*rpm)		newton meters
		*/

		thisforce = (float) (watts / _rpm);
		//thisforce *= 1.3f;
		//thisforce = (float) (.737562175569 * ( (60.0f*watts) / (2.0*PI*rpm) ));			// this should be the actual formula, but it doesn't matter
	}
	else  {
		thisforce = 0.0f;
	}
#endif


	if (_tdc)  {
		if (peddlingTimeout)  {
			peddlingTimeout = false;
			inptr = 0;
			force[inptr++] = thisforce;
		}
		else  {
			load(_rpm);
			inptr = 0;
			force[inptr++] = thisforce;
		}
	}
	else  {
		if (peddlingTimeout)  {
		}
		else  {
			force[inptr] = thisforce;
			inptr++;
			if (inptr == 600)  {			// no crank signal for 3 seconds?
				peddlingTimeout = true;
				primed = false;
				loadcount = 0;
				for(int i=0;i<segments;i++)  {
					thisRevForces[i] = 0;							// no more data, settle to 0
				}
			}
		}
	}

	int i;


	//-------------------------
	// COMPUTE LEFT ATA
	//-------------------------

	float ftemp1, ftemp2;
	
	ftemp1 = ftemp2 = 0.0f;

	for (i=0; i<middle; i++)  {
		ftemp1 += (float) (filteredTorques[i] * thrust[i].center_degrees);
		ftemp2 += (float) (filteredTorques[i]);
	}

	if (ftemp2!=0.0f)  {
		lata = ftemp1/ftemp2;
	}
	else  {
		lata = 90.0f;
	}

	//-------------------------
	// COMPUTE RIGHT ATA
	//-------------------------

	ftemp1 = ftemp2 = 0.0f;
	for(i=middle; i<segments; i++)  {
		ftemp1 += (float) (filteredTorques[i]*thrust[i].center_degrees);
		ftemp2 += (float) (filteredTorques[i]);
	}
	if (ftemp2!=0.0f)  {
		rata = ftemp1/ftemp2 - 180.0f;
	}
	else  {
		rata = 90.0f;
	}

	if (_rpm<=30.0)  {
		lata = rata = 90.0f;
	}

	filter();					// computes leftss and rightss

	return thisforce;
}									// run()

/******************************************************************************
	a new force array is ready which contains about 200 force samples
******************************************************************************/

void SS::load(double rpm)  {
	int i, k;

	loadcount++;

	for(k=0; k<segments; k++)  {
		thisRevForces[k] = 0.0f;
		counts[k] = 0;
	}

	// divide into segments segments

	if (inptr<segments)  {
		bp =1;
		return;
	}

	float m, b;
	map(0.0f, (float)inptr, 0.0f, (float)segments, &m, &b);


	for(i=0; i<inptr; i++)  {
		k = (int)(m*i + b);
		thisRevForces[k] += force[i];
		counts[k]++;
	}

	for(k=0;k<segments;k++)  {
		thisRevForces[k] /= counts[k];
	}
	
	for(i=0;i<segments;i++) lastTwoRevForces[i] = lastTwoRevForces[segments+i];
	for(i=0;i<segments;i++) lastTwoRevForces[segments+i] = thisRevForces[i];

	for(i=0;i<segments;i++)  {
		thisRevForces[i] = lastTwoRevForces[SSShift + i];
	}

	
	if (!primed)  {
		if (loadcount >= 2)  {			// give filteredTorques[] time to get two valid cycles
			primed = true;
		}
	}

	//-------------------------------------------
	// detect one foot out of the pedal here:
	//-------------------------------------------

	float lsum = 0.0f;
	float rsum = 0.0f;

	for(i=0;i<segments;i++)  {
		if (i<segments/2)  {
			lsum += thisRevForces[i];
		}
		else  {
			rsum += thisRevForces[i];
		}
	}

	if (rpm < CUTOFF_RPM)  {
		for(i=0;i<segments;i++)  {
			thisRevForces[i] = 0;							// no more data, settle to 0
		}
	}

	return;
}


/**********************************************************************
called by SS::run() every 5 ms with new data
**********************************************************************/

void SS::filter(void)  {
	static int count=0;

	// ASSUME that we're being called every 5 ms!!!!

	count++;
	if (count<20)  {
		return;
	}
	count = 0;

	#ifdef _DEBUG
	//avgTimer->update();							// 100 ms, checked july 1, 2008
	#endif

	int k;

	minlthrust = FLT_MAX;
	minrthrust = FLT_MAX;
	maxlthrust = -FLT_MAX;
	maxrthrust = -FLT_MAX;
	float thismax = -FLT_MAX;
	
	if (primed)  {
		for(k=0;k<segments;k++)  {
			thrust[k].fval = filteredTorques[k] = (float)tpf[k]->calc(thisRevForces[k]);
			if (k < middle)  {
				if (filteredTorques[k] > maxlthrust)  {
					maxlthrust = filteredTorques[k];
				}
				if (filteredTorques[k] < minlthrust)  {
					minlthrust = filteredTorques[k];
				}
			}
			else  {
				if (filteredTorques[k] > maxrthrust)  {
					maxrthrust = filteredTorques[k];
				}
				if (filteredTorques[k] < minrthrust)  {
					minrthrust = filteredTorques[k];
				}
			}
							
			if (filteredTorques[k] > thismax)  {
				thismax = filteredTorques[k];
			}

			averageForce += filteredTorques[k];
		}			// for each segment

		//------------------------------
		// check for rescaling here:
		// we get here every 100 ms
		//------------------------------

		if (thismax > MAX_SS_FORCE)  {
			belowcount = 0;
			abovecount++;
			
			rescale = false;
//xxx
			if (abovecount >= 20)  {
				MAX_SS_FORCE += 10.0;
				rescale = true;
				abovecount = 0;
			}
		}
		else  {
			abovecount = 0;
			
			if (MAX_SS_FORCE > 10.0)  {
				rescale = false;
				if (thismax < (MAX_SS_FORCE-10.0) )  {
					belowcount++;
					if (belowcount > 20)  {
						MAX_SS_FORCE -= 10.0;
						rescale = true;
						belowcount = 0;
					}
				}
				else  {
					belowcount = 0;
				}
			}
		}
		

	}						// primed
	else  {
		for(k=0;k<segments;k++)  {
			thrust[k].fval = filteredTorques[k] = (float)tpf[k]->calc(thisRevForces[k]);			// tlm2008-08-26, added thrust[k].fval
			averageForce += filteredTorques[k];
		}
	}		// not primed

	averageForce /= segments;
// ok here:
#ifdef _DEBUG
//log->write("%.4f %.4f %.4f\n", averageForce, filteredTorques[18], filteredTorques[19]);
#endif

	//----------------------------------------------------------------
	// compute the spinscan numbers and the left/right power split
	//----------------------------------------------------------------

	leftss = rightss = 0.0f;
	float lsum=0.0f, rsum=0.0f;
	float maxleft, maxright;

	maxleft = maxright = -FLT_MAX;		//-Float.MAX_VALUE;

	leftwatts = rightwatts = 0.0f;


	for(int i=0; i<segments; i++)	{
		if(i<segments/2)  {
			lsum += filteredTorques[i];
			if (filteredTorques[i]>maxleft) maxleft = filteredTorques[i];
		}
		else	{
			rsum += filteredTorques[i];
			if (filteredTorques[i]>maxright) maxright = filteredTorques[i];
		}
	}

	float ftemp = lsum + rsum;
	if (ftemp>0.1f)  {
		leftwatts = 100.0f*lsum / ftemp;
		rightwatts = 100.0f - leftwatts;
	}

	if (maxleft>0.1f)  {
		leftss = (float) ((100.0/(segments/2)) * lsum / maxleft);
	}
	if (maxright>0.1f)  {
		rightss = (float) ((100.0/(segments/2)) * rsum / maxright);
	}

	// tlm20081124:
	if (leftss < 50.0f)  {
		leftss = 50.0f;
	}
	if (rightss < 50.0f)  {
		rightss = 50.0f;
	}

	totalss = (leftss + rightss)/2.0f;
	return;
}

/**********************************************************************
	called every 100 ms
**********************************************************************/

void SS::computeAverages(void)  {
	static int count=0;

	#ifdef _DEBUG
	//avgTimer->update();							// 4.96 ms
	#endif

	// ASSUME that we're being called every 5 ms!!!!

	count++;
	if (count<20)  {
		return;
	}
	count = 0;

	// gets here ever 100 ms.

	averageCounter++;

	accum_lss += leftss;
	accum_rss += rightss;
	accum_ss += totalss;

	average_lss = (float) (accum_lss / averageCounter);
	average_rss = (float) (accum_rss / averageCounter);
	average_ss = (float) (accum_ss / averageCounter);

	return;
}

/**********************************************************************

**********************************************************************/

void SS::reset(void)  {
	int i;

	if (reset_flag==false)  {			// this flag is controlled at the application level. It allows the app to
												// cause the normal reset to be not done. This is so that the average spinscan
												// in the reports is not 0.
		return;
	}

	averageCounter = 0;
	lastavgtime = 0;

	accum_ss = 0.0;
	accum_lss = 0.0;
	accum_rss = 0.0;

	average_lss = 0.0f;
	average_rss = 0.0f;
	average_ss = 0.0f;

	minlthrust = FLT_MAX;
	minrthrust = FLT_MAX;
	maxlthrust = -FLT_MAX;
	maxrthrust = -FLT_MAX;

	totalss = 0.0;
	leftss = 0;
	rightss = 0;
	leftwatts = 0;
	rightwatts = 0;

	bp = 0;
	thisforce = 0.0f;

	MIN_SS_FORCE = 0.0;				// 0 watts
	MAX_SS_FORCE = 10.0;				// 10 lbs
	rescale = FALSE;
	lastFilterTime = 0;

	leftwatts = 0.0;
	rightwatts = 0.0;
	leftss = 0.0;
	rightss = 0.0;
	totalss = 0.0;

	peddlingTimeout = true;
	primed = false;
	inptr = 0;
	loadcount = 0;
	averageForce = 0;
	belowcount = abovecount = 0;

	ssrec = 0;
	leftss = 0.0f;
	rightss = 0.0f;
	totalss = 0.0f;
	firstValidTDC = FALSE;

	for(i=0;i<segments;i++)  {
		filteredTorques[i] = 0.0f;
		thisRevForces[i] = 0;
		thrust[i].fval = thrust[i].raw = thrust[i].a = 0.0f;
		tpf[i]->reset();
	}

//	for(i=0;i<segments;i++)  {
//		tpf[i] = new twoPoleFilter(100);		// argument is unused, so it doesn't matter
//	}

	for(i=0;i<segments*2;i++)  {
		lastTwoRevForces[i] = 0;
	}

	rpmMav->reset();
	wattsFilter->reset();

	lata = 90;
	rata = 90;
	ilata = 90;
	irata = 90;

	return;
}


/**********************************************************************

**********************************************************************/

void SS::snapshot(char *_fname)  {
	FILE *stream;
	int i;

	stream = fopen(_fname, "a+t");

	for(i=0; i<segments; i++)  {
		if ( i < (segments-1) )  {
			fprintf(stream, "%8.4f ", filteredTorques[i]);
		}
		else  {
			fprintf(stream, "%8.4f\n", filteredTorques[i]);
		}
	}


	fclose(stream);

	return;
}

/**********************************************************************

**********************************************************************/

void SS::start(void)  {

	return;
}

