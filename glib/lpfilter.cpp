
#ifdef WIN32
	#pragma once
	#include <windows.h>
#endif

#include <lpfilter.h>

/*********************************************************************

********************************************************************/

LPFilter::LPFilter(void) {

}

/*********************************************************************

********************************************************************/

LPFilter::LPFilter(int _n)  {
	n = (double)_n;
	//fval = 0.0;
	reset();
}

/*********************************************************************

********************************************************************/

LPFilter::~LPFilter(void) {

}


/*********************************************************************

********************************************************************/

#ifdef _DEBUG
double LPFilter::calc(double in, int _id)  {
#else
double LPFilter::calc(double in)  {
#endif
	if (n <= 0.0)  {
		return in;
	}

#ifdef _DEBUG
	int bp = 0;
	if (_id == 1)  {
		if (fval > 0.01)  {
			bp = 1;
		}
	}
#endif

	fval = fval + (in-fval) / n;

#ifdef _DEBUG
	if (_id == 1)  {
		if (fval > 0.01)  {
			bp = 3;
		}
	}
#endif

	return fval;
}

/********************************************************************

********************************************************************/

void LPFilter::setTC(double _n)  {
	n = _n;
}

/********************************************************************

********************************************************************/

double LPFilter::getTC(void)  {
	return n;
}

/********************************************************************

********************************************************************/

void LPFilter::setfval(double _fval)  {
	fval = _fval;

#ifdef _DEBUG
	if (fval > 299.9)  {
		//int bp = 0;
	}
#endif

	return;
}


/********************************************************************

********************************************************************/

void LPFilter::reset(void)  {
	fval = 0.0;
	return;
}


