
//#include <QtGlobal>

#include "qt_twopolefilter.h"
namespace MYQT  {

/**************************************************************************************

**************************************************************************************/

qt_twoPoleFilter::qt_twoPoleFilter(int _n)  {
	n = (double)_n;
	k = .27;
	reset();
}

/**************************************************************************************

**************************************************************************************/

qt_twoPoleFilter::~qt_twoPoleFilter(void) {
}

/**************************************************************************************

**************************************************************************************/

double qt_twoPoleFilter::calc(double in)  {
	if (n <= 0.0)  {
		return in;
	}

	a += (in - a + (in-fval)*k) / 16.0;
	fval += (a-fval)/16.0;

#if  0
//#ifdef _DEBUG
	static double prevfval = 0.0f;
	//if (qAbs(in - fval) > 1000.0)  {
	if (qAbs(fval) > 1000.0)  {
		n = 101;
	}
	prevfval = fval;
#endif

	return fval;
}

/**************************************************************************************

**************************************************************************************/

void qt_twoPoleFilter::setState(double _fval, double _a)  {

	fval = _fval;
	a = _a;

	return;
}

/**************************************************************************************

**************************************************************************************/

void qt_twoPoleFilter::getState(double *_fval, double *_a)  {

	*_fval = fval;
	*_a = a;

	return;
}

/**************************************************************************************

**************************************************************************************/

void qt_twoPoleFilter::reset(void)  {

	fval = 0.0;
	a = 0.0;
	return;
}

}

